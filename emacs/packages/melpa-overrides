(use-modules (emacs build-system melpa)
             ((gnu packages emacs-xyz) #:prefix e/)
             (gnu packages gnupg)
             (gnu packages sqlite)
             (guix build-system gnu)
             (guix packages)
             (guix utils)
             (srfi srfi-1))

(define-syntax define-override
  (syntax-rules ()
    ((_ name var exp)
     (let ((var name))
       (set! name exp)))))

(define-override emacs-vterm pkg
  (package
   (inherit pkg)
   (arguments
    `(#:modules ((emacs build melpa-build-system)
                 ((guix build cmake-build-system) #:prefix cmake:)
                 (guix build emacs-utils)
                 (guix build utils))
      #:imported-modules (,@%melpa-build-system-modules
                          (guix build cmake-build-system))
      #:phases
      (modify-phases %standard-phases
                     (add-after 'unpack 'substitute-vterm-module-path
                                (lambda* (#:key outputs #:allow-other-keys)
                                  (chmod "vterm.el" #o644)
                                  (emacs-substitute-sexps "vterm.el"
                                                          ("(require 'vterm-module nil t)"
                                                           `(module-load
                                                             ,(string-append (assoc-ref outputs "out")
                                                                             "/lib/vterm-module.so"))))))
                     (add-after 'build 'configure
                                ;; Run cmake.
                                (lambda* (#:key outputs #:allow-other-keys)
                                  ((assoc-ref cmake:%standard-phases 'configure)
                                   #:outputs outputs
                                   #:out-of-source? #f
                                   #:configure-flags '("-DUSE_SYSTEM_LIBVTERM=ON"))))
                     (add-after 'configure 'make
                                ;; Run make.
                                (lambda* (#:key (make-flags '()) outputs #:allow-other-keys)
                                  ;; Compile the shared object file.
                                  (apply invoke "make" "all" make-flags)
                                  ;; Move the file into /lib.
                                  (install-file
                                   "vterm-module.so"
                                   (string-append (assoc-ref outputs "out") "/lib")))))
      #:tests? #f))
   (native-inputs
    (package-native-inputs e/emacs-vterm))))

(define-override emacs-geiser pkg
  (package
    (inherit pkg)
    (native-inputs (package-native-inputs e/emacs-geiser))
    (arguments
     `(,@(package-arguments pkg)
       #:phases
       (modify-phases %standard-phases
         (add-before 'install 'make-info
           (lambda* (#:key outputs #:allow-other-keys)
             (with-directory-excursion "doc"
               (invoke "makeinfo" "--no-split"
                       "-o" "geiser.info" "geiser.texi")
               (install-file "geiser.info" (string-append (assoc-ref outputs "out") "/share/info"))))))))))

(define-override emacs-geiser-guile pkg
  (package
    (inherit pkg)
    (inputs (package-inputs e/emacs-geiser-guile))))

(define-override emacs-guix pkg
  (package
    (inherit pkg)
    (build-system gnu-build-system)
    (arguments (package-arguments e/emacs-guix))
    (native-inputs (package-native-inputs e/emacs-guix))
    (inputs (package-inputs e/emacs-guix))
    (propagated-inputs
     (list emacs-dash
           emacs-geiser
           emacs-geiser-guile
           emacs-bui
           emacs-magit-popup
           emacs-edit-indirect
           emacs-transient))))

;; Local Variables:
;; mode: scheme
;; End:
